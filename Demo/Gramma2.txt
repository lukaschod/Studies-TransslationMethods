/*************************************************************************
 * 
 * BNF Gramma of Void Language
 * __________________
 * 
 *  09/23/2017
 *  By Lukas Chodosevicius
 * 
 * This is the BNF gramma of 'C language.
 * This language is based on C\C++ just a small part of it for learning purpose
 */

//------------------------- Program ----------------------
<program>           ::= 'Program' '{' <lanesDeclare>
<lanesDeclare>      ::= <laneDeclare> '}' | <laneDeclare> <lanesDeclare>
<laneDeclare>       ::= <functionDeclare> | veriableDeclareInit> | <veriableDeclare> | <classDeclare>

//--------------------------- Characters --------------------------
<digits>       ::=     <digit> <digits> | <digit>
<digit>        ::=     '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

<letters>      ::=     <letter> <letters> | <letter>
<letter>       ::=     'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'

<symbols>      ::=     <symbol> <symbols> | <symbol>
<symbol>       ::=     '_' 

<texts>        ::=     <text> <texts> | <text>
<text>         ::=     <letter> | <digit> | <symbol>

<name>         ::=     <letter> <texts> | <symbol> <texts>

<seperator>    ::=     ';'

//------------------------- Statements ---------------------
<block>              ::=     '{' '}' | '{' <statements>

<statements>         ::=     <statement> '}' | <statement> <statements>
<statement>          ::=     <statementDefault> | <statementCondition> | <statementControl> | <statementReturn> | <expression> <seperator>

<statementDefault>   ::=     <veriableDeclareInit> | <veriableDeclare>
<statementControl>   ::=     <loopWhile> | <statementCondition>
<statementCondition> ::=     'if' '(' <expression> ')' <block> 'else' <block> | 'if' '(' <expression> ')' <block>
<statementReturn>    ::=     'return' <expression> <seperator>

//---------------------- Loops ----------------
<loopWhile>       ::=     'while' '(' <expression> ')' <block>

//------------------------- Veriables ----------------------
<veriableName>         ::=    <name>

<veriableDeclare>      ::=    <typeNameFull> <veriableName> <seperator>
<veriableDeclareInit>  ::=    <typeNameFull> <veriableName> '=' <expression> <seperator>
<veriableChange>       ::=    <expressionVeriable> <assigment> <expression> <seperator>

//------------------------- Functions ----------------------
<functionName>         ::=     <name>

<functionDeclare>      ::=     <typeNameFull> <functionName> '(' ')' <block> | <typeNameFull> <functionName> '(' <parametersDeclare> <block>
<parametersDeclare>    ::=     <parameterDeclare> ')' | <parameterDeclare> ',' <parametersDeclare>
<parameterDeclare>     ::=     <typeNameFull> <veriableName>

<functionCall>         ::=     <functionName> '(' <parametersCall> | <functionName> '(' ')' 
<parametersCall>       ::=     <expression> ')' | <expression> ',' <parametersCall>

//------------------------- Class ----------------------
<className>      ::=     <name>
<classNameFull>  ::=     <className> <postfix> | <className>

<classDeclare>          ::=     'class' <className> '{' '}' | 'class' <className> '{' <classLanesDeclare> 
<classLanesDeclare>     ::=     <classLaneDeclare> '}' | <classLaneDeclare> <classLanesDeclare>
<classLaneDeclare>      ::=     <methodDeclare> | <memberDeclare>
<accesabilityName>      ::=     'private' | 'public' | 'protected'

<memberDeclare>         ::=     <accesabilityName> <veriableDeclare>

<methodDeclare>         ::=     <accesabilityName> <methodDefaultDeclare>
<methodDefaultDeclare>  ::=     <functionDeclare>

--------------------------- Types --------------------------
<constantInt>            ::=     <digits>
<constantFloat>          ::=     <constantInt> '.' <constantInt>
<constantBoolean>        ::=     'true' | 'false'
<constantString>         ::=     '"' <texts> '"'
<constant>       ::=     <constantInt> | <constantFloat> | <constantBoolean> | <constantString>

<postfix>        ::=     '*'

<primitiveName>          ::=     'int' | 'float' | 'string' | 'bool' | 'void'
<primitiveNameFull>      ::=     <primitiveName> <postfix> | <primitiveName>

<typeNameFull>           ::=     <primitiveNameFull> | <classNameFull>

//------------------------ Expressions --------------------
<and>          ::=     '&' '&'
<or>           ::=     '|' '|'
<comparison>   ::=     '<' | '<' '=' | '>' | '>' '=' | '!' '=' | '=' '='
<add>          ::=     '+' | '-'
<mult>         ::=     '*' | '/'
<assigment>    ::=     '='

<expression>      ::=     <expressionOr> <assigment> <expression> | <expressionOr>
<expressionOr>    ::=     <expressionAnd> <or> <expressionOr> | <expressionAnd>
<expressionAnd>   ::=     <expressionCmp> <and> <expressionAnd> | <expressionCmp> 
<expressionCmp>   ::=     <expressionAdd> <comparison> <expressionCmp> | <expressionAdd>
<expressionAdd>   ::=     <expressionMult> <add> <expressionAdd> | <expressionMult>
<expressionMult>  ::=     <expressionUno> <mult> <expressionMult> | <expressionUno>
<expressionUno>   ::=     <expressionVeriable> | <constant> | '(' <expression> ')'

<expressionVeriable>      ::= <expressionVeriableItem> '.' <expressionVeriable> | <expressionVeriableItem>
<expressionVeriableItem>  ::= <functionCall> | <veriableName>
